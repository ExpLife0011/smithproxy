settings = {
    certs_path = "../certs/";
    certs_ca_key_password = "fortinet";
    plaintext_port = "50080";   // beware, it's a string!
    ssl_port = "50443";         // beware, it's a string!
    udp_port = "50081";         // beware, it's a string!
    default_write_payload = FALSE; // write payload into files by default (policy rules will override this)
    write_payload_dir = "mitm";
    write_payload_file_prefix = "";
    write_payload_file_suffix = "smcap";

/*
    Logging levels 
    NON 0   INF 6
    FAT 1   DIA 7
    CRI 2   DEB 8
    ERR 3   DUM 9
    WAR 4   EXT 10
    NOT 5    
*/
    log_level = 6;              // INF
}

debug = {
    log_data_crc = FALSE;
    log_sockets  = FALSE;
}

address_objects = {
    any = {
        type = 0;
        cidr = "0.0.0.0/0";
    }
}

port_objects = {
    all = {
        start = 0;
        end = 65535;
    }
}

/*
 ICMP = 1
 TCP  = 6
 UDP  = 17
*/

proto_objects = {
    tcp = {
        id = 6;
    }
}

/*
 Detection modes:
 0 - NONE - no detection at all
 1 - PRE  - detect based on peeked data (not read yet, or salvaged data from read buffer, if read process was faster) and write buffer data (not written yet)
 2 - POST - detect based on received/sent data -- no reason to set it - useful for connections when peek doesn't seem to be reliable or generally doesn't work.
*/

detection_profiles = {
    default = {
        mode = 0;
    },
    detect = {
        mode = 1;
    }
}

content_profiles = {
    default = {
        write_payload = FALSE;
        write_limit_client = 0;
        write_limit_server = 0;
    }
}

policy = (
    {
        proto = "tcp";
        src = "any";
        sport = "all";
        dst = "any";
        dport = "all";
        detection_profile = "default";
        content_profile = "default";
        action = "accept";
    }
)


starttls_signatures = (
    {
        cat  = "mail";
        name = "smtp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^STARTTLS";
                bytes_start = 0;
                bytes_max = 16;
            },
            {
                side = "w";
                type = "regex";
                signature = "^2[0-5]0 ";
                bytes_start = 0;
                bytes_max = 16;
            }
        )
    },
    {
        cat  = "mail";
        name = "imap/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = ". STARTTLS\r\n";
                bytes_start = 0;
                bytes_max = 16;
            },
            {
                side = "w";
                type = "regex";
                signature = ". OK";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    },
    {
        cat  = "mail";    
        name = "pop3/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^STLS\r\n";
                bytes_start = 0;
                bytes_max = 10;
            },
            {
                side = "w";
                type = "regex";
                signature = "^[+]OK";
                bytes_start = 0;
                bytes_max = 15;
            }
        )
    },
    {
        cat  = "file";
        name = "ftp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^AUTH TLS\r\n";
                bytes_start = 0;
                bytes_max = 10;
            },
            {
                side = "w";
                type = "regex";
                signature = "^[2][0-9][0-9] AUTH";
                bytes_start = 0;
                bytes_max = 15;
            }
        )
    },
    {
        cat  = "im";    
        name = "xmpp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^<starttls [^>/]+xmpp-tls[^>/]/>";
                bytes_start = 0;
                bytes_max = 64;
            },
            {
                side = "w";
                type = "regex";
                signature = "^<proceed [^>/]+xmpp-tls[^>/]/>";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    }    
)

detection_signatures = (
    {
        cat  = "www";    
        name = "http/get|post";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^(GET|POST) +([^ ]+)";
                bytes_start = 0;
                bytes_max = 64;
            },
            {
                side = "w";
                type = "regex";
                signature = "HTTP/1.[01] +([1-5][0-9][0-9]) ";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    },
    {
        cat  = "av";
        name = "virus/eicar";
        side = "client";
        flow = (
            {
                side = "w";
                type = "simple";
                signature = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*";
                bytes_start = 0;
                bytes_max = 0;
            }
        )
    }    
)